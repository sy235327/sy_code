<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE struts PUBLIC
	"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"
	"http://struts.apache.org/dtds/struts-2.3.dtd">

<struts>
    <package name="demo1" extends="struts-default" namespace="/">
        <!--全局的 转发,重定向页面-->
        <!--<global-results>-->
            <!--&lt;!&ndash;-->
                <!--result 标签-->
                <!--name   action类中方法返回对应的字符串调用那个result标签跳转的页面-->

                <!--type   值多个 只需要记住四个-->
                       <!--dispatcher 请求转发到jsp-->
                       <!--chain 请求转发到action-->
                       <!--redirect 重定向到jsp-->
                       <!--redirectAction 重定向到action-->

            <!--&ndash;&gt;-->
            <!--<result name="success" type="dispatcher">/demo1/success.jsp</result>-->
        <!--</global-results>-->


        <!--完全解耦合的方式-->
        <action name="demo1Action" class="com.demo.user_action1.Demo1Action">
            <!--局部 请求转发,重定向的页面-->
            <result name="success">/demo1/success.jsp</result>
        </action>

        <!--使用原生的API方式-->
        <action name="demo2Action" class="com.demo.user_action1.Demo2Action">
            <!--局部 请求转发,重定向的页面-->
            <result name="success">/demo1/success.jsp</result>
        </action>


        <!--重定向到Action-->
        <action name="demo3Action_*" class="com.demo.user_action1.Demo3Action" method="{1}">
            <!--
                重定向到action需要 按照这个格式编写
                action标签中定义的name访问路径(action标签没有使用动态方法和通配符的)
                使用通配符的action需要在method的描述的*位置改为方法名称,动态方法一样
            -->
            <result name="success" type="redirectAction">demo3Action_save</result>
        </action>
    </package>

    <!--regist-->
    <package name="demo2" namespace="/" extends="struts-default">
        <!--属性驱动的方式一  将数据封装到action中-->
        <action name="regist1" class="com.demo.regist_action.Regist1Action"></action>

        <!--属性驱动的方式二 OGNL表达式将数据封装到javabean中-->
        <action name="regist2" class="com.demo.regist_action.Regist2Action"></action>

        <!--模型驱动的方式-->
        <action name="regist3" class="com.demo.regist_action.Regist3Action"></action>

        <!--属性驱动 OGNL表达式将数据封装到一个List集合中-->
        <action name="regist4" class="com.demo.regist_action.Regist4Action"></action>

        <!--属性驱动 OGNL表达式将数据封装到一个Map集合中-->
        <action name="regist5" class="com.demo.regist_action.Regist5Action"></action>
    </package>

    <!--测试自定义拦截器-->
    <package name="action3" namespace="/" extends="struts-default">
        <!--在package目录中定义拦截器   第一种方式-->
        <!--<interceptors>-->
            <!--&lt;!&ndash;定义了拦截器&ndash;&gt;-->
            <!--<interceptor name="DemoInterceptor" class="com.demo.interceptor.DemoInterceptor"/>-->
        <!--</interceptors>-->

        <!--第二种方式： 定义拦截器栈-->
        <interceptors>
            <interceptor name="DemoInterceptor" class="com.demo.interceptor.DemoInterceptor"/>
            <!--定义拦截器栈-->
            <interceptor-stack name="myStack">
                <interceptor-ref name="DemoInterceptor" />
            </interceptor-stack>
        </interceptors>

        <action name="userAction" class="com.demo.action3.UserAction">
            <!--第一种方式： 在action中引入拦截器(引入了自己的拦截器,默认栈的拦截器就不执行了,必须要自己手动引入默认栈)-->
            <!--<interceptor-ref name="DemoInterceptor"/>-->
            <!--手动引入默认栈-->
            <!--<interceptor-ref name="defaultStack" />-->

            <!--第二种方式: 引入拦截器栈就OK-->
            <interceptor-ref name="myStack" />
        </action>
    </package>
</struts>
